// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: protos/openapi.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenApiClient is the client API for OpenApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenApiClient interface {
	IsDir(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error)
	IsFile(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error)
	IsExist(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error)
	GetFileSize(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfInt64, error)
	GetNode(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*TNode, error)
	GetNodes(ctx context.Context, in *QryOfStrings, opts ...grpc.CallOption) (*DirNodeListDto, error)
	GetDirNameList(ctx context.Context, in *QueryLimitOfString, opts ...grpc.CallOption) (*DirNameListDto, error)
	GetDirNodeList(ctx context.Context, in *QueryLimitOfString, opts ...grpc.CallOption) (*DirNodeListDto, error)
	DoMkDir(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfString, error)
	DoDelete(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error)
	DoRename(ctx context.Context, in *RenameCmd, opts ...grpc.CallOption) (*ResultOfBool, error)
	DoCopy(ctx context.Context, in *MoveCmd, opts ...grpc.CallOption) (*ResultOfString, error)
	DoMove(ctx context.Context, in *CopyCmd, opts ...grpc.CallOption) (*ResultOfBool, error)
	DoQueryToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoAskReadToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoAskWriteToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoRefreshToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoSubmitWriteToken(ctx context.Context, in *SubmitTokenCmd, opts ...grpc.CallOption) (*TNode, error)
	GetReadStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*ResultOfString, error)
	GetWriteStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*ResultOfString, error)
}

type openApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenApiClient(cc grpc.ClientConnInterface) OpenApiClient {
	return &openApiClient{cc}
}

func (c *openApiClient) IsDir(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error) {
	out := new(ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/IsDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) IsFile(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error) {
	out := new(ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/IsFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) IsExist(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error) {
	out := new(ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/IsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetFileSize(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfInt64, error) {
	out := new(ResultOfInt64)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetFileSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetNode(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*TNode, error) {
	out := new(TNode)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetNodes(ctx context.Context, in *QryOfStrings, opts ...grpc.CallOption) (*DirNodeListDto, error) {
	out := new(DirNodeListDto)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetDirNameList(ctx context.Context, in *QueryLimitOfString, opts ...grpc.CallOption) (*DirNameListDto, error) {
	out := new(DirNameListDto)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetDirNameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetDirNodeList(ctx context.Context, in *QueryLimitOfString, opts ...grpc.CallOption) (*DirNodeListDto, error) {
	out := new(DirNodeListDto)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetDirNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoMkDir(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfString, error) {
	out := new(ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoMkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoDelete(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*ResultOfBool, error) {
	out := new(ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoRename(ctx context.Context, in *RenameCmd, opts ...grpc.CallOption) (*ResultOfBool, error) {
	out := new(ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoCopy(ctx context.Context, in *MoveCmd, opts ...grpc.CallOption) (*ResultOfString, error) {
	out := new(ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoMove(ctx context.Context, in *CopyCmd, opts ...grpc.CallOption) (*ResultOfBool, error) {
	out := new(ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoQueryToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoQueryToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoAskReadToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoAskReadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoAskWriteToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoAskWriteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoRefreshToken(ctx context.Context, in *QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoSubmitWriteToken(ctx context.Context, in *SubmitTokenCmd, opts ...grpc.CallOption) (*TNode, error) {
	out := new(TNode)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoSubmitWriteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetReadStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*ResultOfString, error) {
	out := new(ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetReadStreamURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetWriteStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*ResultOfString, error) {
	out := new(ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetWriteStreamURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenApiServer is the server API for OpenApi service.
// All implementations should embed UnimplementedOpenApiServer
// for forward compatibility
type OpenApiServer interface {
	IsDir(context.Context, *QryOfString) (*ResultOfBool, error)
	IsFile(context.Context, *QryOfString) (*ResultOfBool, error)
	IsExist(context.Context, *QryOfString) (*ResultOfBool, error)
	GetFileSize(context.Context, *QryOfString) (*ResultOfInt64, error)
	GetNode(context.Context, *QryOfString) (*TNode, error)
	GetNodes(context.Context, *QryOfStrings) (*DirNodeListDto, error)
	GetDirNameList(context.Context, *QueryLimitOfString) (*DirNameListDto, error)
	GetDirNodeList(context.Context, *QueryLimitOfString) (*DirNodeListDto, error)
	DoMkDir(context.Context, *QryOfString) (*ResultOfString, error)
	DoDelete(context.Context, *QryOfString) (*ResultOfBool, error)
	DoRename(context.Context, *RenameCmd) (*ResultOfBool, error)
	DoCopy(context.Context, *MoveCmd) (*ResultOfString, error)
	DoMove(context.Context, *CopyCmd) (*ResultOfBool, error)
	DoQueryToken(context.Context, *QryOfString) (*StreamToken, error)
	DoAskReadToken(context.Context, *QryOfString) (*StreamToken, error)
	DoAskWriteToken(context.Context, *QryOfString) (*StreamToken, error)
	DoRefreshToken(context.Context, *QryOfString) (*StreamToken, error)
	DoSubmitWriteToken(context.Context, *SubmitTokenCmd) (*TNode, error)
	GetReadStreamURL(context.Context, *QryStreamURLCmd) (*ResultOfString, error)
	GetWriteStreamURL(context.Context, *QryStreamURLCmd) (*ResultOfString, error)
}

// UnimplementedOpenApiServer should be embedded to have forward compatible implementations.
type UnimplementedOpenApiServer struct {
}

func (UnimplementedOpenApiServer) IsDir(context.Context, *QryOfString) (*ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDir not implemented")
}
func (UnimplementedOpenApiServer) IsFile(context.Context, *QryOfString) (*ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFile not implemented")
}
func (UnimplementedOpenApiServer) IsExist(context.Context, *QryOfString) (*ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExist not implemented")
}
func (UnimplementedOpenApiServer) GetFileSize(context.Context, *QryOfString) (*ResultOfInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSize not implemented")
}
func (UnimplementedOpenApiServer) GetNode(context.Context, *QryOfString) (*TNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedOpenApiServer) GetNodes(context.Context, *QryOfStrings) (*DirNodeListDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedOpenApiServer) GetDirNameList(context.Context, *QueryLimitOfString) (*DirNameListDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirNameList not implemented")
}
func (UnimplementedOpenApiServer) GetDirNodeList(context.Context, *QueryLimitOfString) (*DirNodeListDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirNodeList not implemented")
}
func (UnimplementedOpenApiServer) DoMkDir(context.Context, *QryOfString) (*ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMkDir not implemented")
}
func (UnimplementedOpenApiServer) DoDelete(context.Context, *QryOfString) (*ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoDelete not implemented")
}
func (UnimplementedOpenApiServer) DoRename(context.Context, *RenameCmd) (*ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRename not implemented")
}
func (UnimplementedOpenApiServer) DoCopy(context.Context, *MoveCmd) (*ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCopy not implemented")
}
func (UnimplementedOpenApiServer) DoMove(context.Context, *CopyCmd) (*ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMove not implemented")
}
func (UnimplementedOpenApiServer) DoQueryToken(context.Context, *QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoQueryToken not implemented")
}
func (UnimplementedOpenApiServer) DoAskReadToken(context.Context, *QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAskReadToken not implemented")
}
func (UnimplementedOpenApiServer) DoAskWriteToken(context.Context, *QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAskWriteToken not implemented")
}
func (UnimplementedOpenApiServer) DoRefreshToken(context.Context, *QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRefreshToken not implemented")
}
func (UnimplementedOpenApiServer) DoSubmitWriteToken(context.Context, *SubmitTokenCmd) (*TNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSubmitWriteToken not implemented")
}
func (UnimplementedOpenApiServer) GetReadStreamURL(context.Context, *QryStreamURLCmd) (*ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadStreamURL not implemented")
}
func (UnimplementedOpenApiServer) GetWriteStreamURL(context.Context, *QryStreamURLCmd) (*ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteStreamURL not implemented")
}

// UnsafeOpenApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenApiServer will
// result in compilation errors.
type UnsafeOpenApiServer interface {
	mustEmbedUnimplementedOpenApiServer()
}

func RegisterOpenApiServer(s grpc.ServiceRegistrar, srv OpenApiServer) {
	s.RegisterService(&OpenApi_ServiceDesc, srv)
}

func _OpenApi_IsDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).IsDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/IsDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).IsDir(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_IsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).IsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/IsFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).IsFile(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_IsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).IsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/IsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).IsExist(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetFileSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetFileSize(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetNode(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetNodes(ctx, req.(*QryOfStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetDirNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLimitOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetDirNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetDirNameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetDirNameList(ctx, req.(*QueryLimitOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetDirNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLimitOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetDirNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetDirNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetDirNodeList(ctx, req.(*QueryLimitOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoMkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoMkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoMkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoMkDir(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoDelete(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoRename(ctx, req.(*RenameCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoCopy(ctx, req.(*MoveCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoMove(ctx, req.(*CopyCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoQueryToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoQueryToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoQueryToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoQueryToken(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoAskReadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoAskReadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoAskReadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoAskReadToken(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoAskWriteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoAskWriteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoAskWriteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoAskWriteToken(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoRefreshToken(ctx, req.(*QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoSubmitWriteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTokenCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoSubmitWriteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoSubmitWriteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoSubmitWriteToken(ctx, req.(*SubmitTokenCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetReadStreamURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryStreamURLCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetReadStreamURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetReadStreamURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetReadStreamURL(ctx, req.(*QryStreamURLCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetWriteStreamURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryStreamURLCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetWriteStreamURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetWriteStreamURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetWriteStreamURL(ctx, req.(*QryStreamURLCmd))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenApi_ServiceDesc is the grpc.ServiceDesc for OpenApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.OpenApi",
	HandlerType: (*OpenApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsDir",
			Handler:    _OpenApi_IsDir_Handler,
		},
		{
			MethodName: "IsFile",
			Handler:    _OpenApi_IsFile_Handler,
		},
		{
			MethodName: "IsExist",
			Handler:    _OpenApi_IsExist_Handler,
		},
		{
			MethodName: "GetFileSize",
			Handler:    _OpenApi_GetFileSize_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _OpenApi_GetNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _OpenApi_GetNodes_Handler,
		},
		{
			MethodName: "GetDirNameList",
			Handler:    _OpenApi_GetDirNameList_Handler,
		},
		{
			MethodName: "GetDirNodeList",
			Handler:    _OpenApi_GetDirNodeList_Handler,
		},
		{
			MethodName: "DoMkDir",
			Handler:    _OpenApi_DoMkDir_Handler,
		},
		{
			MethodName: "DoDelete",
			Handler:    _OpenApi_DoDelete_Handler,
		},
		{
			MethodName: "DoRename",
			Handler:    _OpenApi_DoRename_Handler,
		},
		{
			MethodName: "DoCopy",
			Handler:    _OpenApi_DoCopy_Handler,
		},
		{
			MethodName: "DoMove",
			Handler:    _OpenApi_DoMove_Handler,
		},
		{
			MethodName: "DoQueryToken",
			Handler:    _OpenApi_DoQueryToken_Handler,
		},
		{
			MethodName: "DoAskReadToken",
			Handler:    _OpenApi_DoAskReadToken_Handler,
		},
		{
			MethodName: "DoAskWriteToken",
			Handler:    _OpenApi_DoAskWriteToken_Handler,
		},
		{
			MethodName: "DoRefreshToken",
			Handler:    _OpenApi_DoRefreshToken_Handler,
		},
		{
			MethodName: "DoSubmitWriteToken",
			Handler:    _OpenApi_DoSubmitWriteToken_Handler,
		},
		{
			MethodName: "GetReadStreamURL",
			Handler:    _OpenApi_GetReadStreamURL_Handler,
		},
		{
			MethodName: "GetWriteStreamURL",
			Handler:    _OpenApi_GetWriteStreamURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/openapi.proto",
}
