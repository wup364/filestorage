// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: openapi.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	dto "fstools/adapter4grpc/server/dto"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RenameCmd 重命名
type RenameCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (x *RenameCmd) Reset() {
	*x = RenameCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameCmd) ProtoMessage() {}

func (x *RenameCmd) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameCmd.ProtoReflect.Descriptor instead.
func (*RenameCmd) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{0}
}

func (x *RenameCmd) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *RenameCmd) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

// MoveCmd move
type MoveCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst      string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Override bool   `protobuf:"varint,3,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *MoveCmd) Reset() {
	*x = MoveCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveCmd) ProtoMessage() {}

func (x *MoveCmd) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveCmd.ProtoReflect.Descriptor instead.
func (*MoveCmd) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{1}
}

func (x *MoveCmd) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *MoveCmd) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *MoveCmd) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

// CopyCmd move
type CopyCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst      string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Override bool   `protobuf:"varint,3,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *CopyCmd) Reset() {
	*x = CopyCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyCmd) ProtoMessage() {}

func (x *CopyCmd) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyCmd.ProtoReflect.Descriptor instead.
func (*CopyCmd) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{2}
}

func (x *CopyCmd) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *CopyCmd) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *CopyCmd) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

// SubmitTokenCmd 提交token
type SubmitTokenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Override bool   `protobuf:"varint,2,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *SubmitTokenCmd) Reset() {
	*x = SubmitTokenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTokenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTokenCmd) ProtoMessage() {}

func (x *SubmitTokenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTokenCmd.ProtoReflect.Descriptor instead.
func (*SubmitTokenCmd) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitTokenCmd) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SubmitTokenCmd) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

// QryStreamURLCmd 查询流URL
type QryStreamURLCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeNo   string `protobuf:"bytes,1,opt,name=nodeNo,proto3" json:"nodeNo,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *QryStreamURLCmd) Reset() {
	*x = QryStreamURLCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryStreamURLCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryStreamURLCmd) ProtoMessage() {}

func (x *QryStreamURLCmd) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryStreamURLCmd.ProtoReflect.Descriptor instead.
func (*QryStreamURLCmd) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{4}
}

func (x *QryStreamURLCmd) GetNodeNo() string {
	if x != nil {
		return x.NodeNo
	}
	return ""
}

func (x *QryStreamURLCmd) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QryStreamURLCmd) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// TNode 元数据内容(filenames)
type TNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid   string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Addr  string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Flag  int32  `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Name  string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Size  int64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Ctime int64  `protobuf:"varint,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime int64  `protobuf:"varint,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Props string `protobuf:"bytes,9,opt,name=props,proto3" json:"props,omitempty"`
}

func (x *TNode) Reset() {
	*x = TNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNode) ProtoMessage() {}

func (x *TNode) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNode.ProtoReflect.Descriptor instead.
func (*TNode) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{5}
}

func (x *TNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TNode) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *TNode) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *TNode) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *TNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TNode) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TNode) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *TNode) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *TNode) GetProps() string {
	if x != nil {
		return x.Props
	}
	return ""
}

// StreamToken 流操作Token
type StreamToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	NodeNo   string `protobuf:"bytes,2,opt,name=nodeNo,proto3" json:"nodeNo,omitempty"`
	FileID   string `protobuf:"bytes,3,opt,name=fileID,proto3" json:"fileID,omitempty"`
	FilePath string `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
	FileSize int64  `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	CTime    int64  `protobuf:"varint,6,opt,name=cTime,proto3" json:"cTime,omitempty"`
	MTime    int64  `protobuf:"varint,7,opt,name=mTime,proto3" json:"mTime,omitempty"`
	EndPoint string `protobuf:"bytes,8,opt,name=endPoint,proto3" json:"endPoint,omitempty"`
	Type     int32  `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *StreamToken) Reset() {
	*x = StreamToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamToken) ProtoMessage() {}

func (x *StreamToken) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamToken.ProtoReflect.Descriptor instead.
func (*StreamToken) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{6}
}

func (x *StreamToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StreamToken) GetNodeNo() string {
	if x != nil {
		return x.NodeNo
	}
	return ""
}

func (x *StreamToken) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *StreamToken) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *StreamToken) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *StreamToken) GetCTime() int64 {
	if x != nil {
		return x.CTime
	}
	return 0
}

func (x *StreamToken) GetMTime() int64 {
	if x != nil {
		return x.MTime
	}
	return 0
}

func (x *StreamToken) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

func (x *StreamToken) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// SrcAndDstBo src 和 dst
type SrcAndDstBo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (x *SrcAndDstBo) Reset() {
	*x = SrcAndDstBo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcAndDstBo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcAndDstBo) ProtoMessage() {}

func (x *SrcAndDstBo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcAndDstBo.ProtoReflect.Descriptor instead.
func (*SrcAndDstBo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{7}
}

func (x *SrcAndDstBo) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *SrcAndDstBo) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

// CopyNodeBo 拷贝
type CopyNodeBo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst      string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Override bool   `protobuf:"varint,3,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *CopyNodeBo) Reset() {
	*x = CopyNodeBo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyNodeBo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyNodeBo) ProtoMessage() {}

func (x *CopyNodeBo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyNodeBo.ProtoReflect.Descriptor instead.
func (*CopyNodeBo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{8}
}

func (x *CopyNodeBo) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *CopyNodeBo) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *CopyNodeBo) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

// MoveNodeBo 移动
type MoveNodeBo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst      string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Override bool   `protobuf:"varint,3,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *MoveNodeBo) Reset() {
	*x = MoveNodeBo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveNodeBo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveNodeBo) ProtoMessage() {}

func (x *MoveNodeBo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveNodeBo.ProtoReflect.Descriptor instead.
func (*MoveNodeBo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{9}
}

func (x *MoveNodeBo) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *MoveNodeBo) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *MoveNodeBo) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

// WriteTokenBo 文件上传递交token
type WriteTokenBo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Override bool   `protobuf:"varint,2,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *WriteTokenBo) Reset() {
	*x = WriteTokenBo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTokenBo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTokenBo) ProtoMessage() {}

func (x *WriteTokenBo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTokenBo.ProtoReflect.Descriptor instead.
func (*WriteTokenBo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{10}
}

func (x *WriteTokenBo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WriteTokenBo) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

// LimitQueryBo 分页查询
type LimitQueryBo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LimitQueryBo) Reset() {
	*x = LimitQueryBo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitQueryBo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitQueryBo) ProtoMessage() {}

func (x *LimitQueryBo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitQueryBo.ProtoReflect.Descriptor instead.
func (*LimitQueryBo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{11}
}

func (x *LimitQueryBo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *LimitQueryBo) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LimitQueryBo) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// CreateUserBo 用户表存储的结构
type CreateUserBo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType int32  `protobuf:"varint,1,opt,name=userType,proto3" json:"userType,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	UserPWD  string `protobuf:"bytes,4,opt,name=userPWD,proto3" json:"userPWD,omitempty"`
}

func (x *CreateUserBo) Reset() {
	*x = CreateUserBo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserBo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserBo) ProtoMessage() {}

func (x *CreateUserBo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserBo.ProtoReflect.Descriptor instead.
func (*CreateUserBo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{12}
}

func (x *CreateUserBo) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *CreateUserBo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateUserBo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateUserBo) GetUserPWD() string {
	if x != nil {
		return x.UserPWD
	}
	return ""
}

// PwdUpdateBo 更改用户密码
type PwdUpdateBo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pwd  string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (x *PwdUpdateBo) Reset() {
	*x = PwdUpdateBo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PwdUpdateBo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PwdUpdateBo) ProtoMessage() {}

func (x *PwdUpdateBo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PwdUpdateBo.ProtoReflect.Descriptor instead.
func (*PwdUpdateBo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{13}
}

func (x *PwdUpdateBo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PwdUpdateBo) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

// UserListDto 用户信息列表
type UserListDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*UserInfo `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	Total int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserListDto) Reset() {
	*x = UserListDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListDto) ProtoMessage() {}

func (x *UserListDto) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListDto.ProtoReflect.Descriptor instead.
func (*UserListDto) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{14}
}

func (x *UserListDto) GetDatas() []*UserInfo {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *UserListDto) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// UserInfo 用户表存储的结构
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType int32  `protobuf:"varint,1,opt,name=userType,proto3" json:"userType,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	CtTime   int64  `protobuf:"varint,4,opt,name=ctTime,proto3" json:"ctTime,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{15}
}

func (x *UserInfo) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetCtTime() int64 {
	if x != nil {
		return x.CtTime
	}
	return 0
}

// DirNameListDto 文件夹目录列表
type DirNameListDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []string `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	Total int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DirNameListDto) Reset() {
	*x = DirNameListDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirNameListDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirNameListDto) ProtoMessage() {}

func (x *DirNameListDto) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirNameListDto.ProtoReflect.Descriptor instead.
func (*DirNameListDto) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{16}
}

func (x *DirNameListDto) GetDatas() []string {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *DirNameListDto) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// DirNodeListDto 文件夹目录列表
type DirNodeListDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*TNode `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	Total int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DirNodeListDto) Reset() {
	*x = DirNodeListDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirNodeListDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirNodeListDto) ProtoMessage() {}

func (x *DirNodeListDto) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirNodeListDto.ProtoReflect.Descriptor instead.
func (*DirNodeListDto) Descriptor() ([]byte, []int) {
	return file_openapi_proto_rawDescGZIP(), []int{17}
}

func (x *DirNodeListDto) GetDatas() []*TNode {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *DirNodeListDto) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_openapi_proto protoreflect.FileDescriptor

var file_openapi_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0e, 0x64, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x07, 0x4d, 0x6f, 0x76,
	0x65, 0x43, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x07, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6d, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0x42, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6d,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x51, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x55, 0x52, 0x4c, 0x43, 0x6d, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0xbb, 0x01, 0x0a, 0x05, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0xe7,
	0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x41,
	0x6e, 0x64, 0x44, 0x73, 0x74, 0x42, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0a, 0x43,
	0x6f, 0x70, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x0a, 0x4d, 0x6f, 0x76,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x0c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x78, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x50, 0x57, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x57, 0x44, 0x22, 0x33, 0x0a, 0x0b, 0x50, 0x77, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x22, 0x4c, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x74, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x72, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c,
	0x0a, 0x0e, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x0e,
	0x44, 0x69, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x74, 0x6f, 0x12, 0x24,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x83, 0x09, 0x0a, 0x07, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x2e, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x69, 0x72, 0x12,
	0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x1a, 0x11, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x66,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x11, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f,
	0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x11, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51,
	0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x12, 0x2e, 0x64, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x74,
	0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x64, 0x74,
	0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x17,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x74, 0x6f, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x44, 0x6f, 0x4d, 0x6b, 0x44, 0x69, 0x72,
	0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x44, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x11, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08,
	0x44, 0x6f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x1a, 0x11, 0x2e, 0x64,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x06, 0x44, 0x6f, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x10, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6d, 0x64, 0x1a, 0x13, 0x2e,
	0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x06, 0x44, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x10,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6d, 0x64,
	0x1a, 0x11, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x66, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x44, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0e, 0x44, 0x6f, 0x41, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x44,
	0x6f, 0x41, 0x73, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10,
	0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x44, 0x6f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x2e, 0x64, 0x74, 0x6f,
	0x2e, 0x51, 0x72, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x12, 0x44, 0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x6d, 0x64, 0x1a, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x51, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x52, 0x4c,
	0x43, 0x6d, 0x64, 0x1a, 0x13, 0x2e, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x52, 0x4c, 0x12,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x72, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x52, 0x4c, 0x43, 0x6d, 0x64, 0x1a, 0x13, 0x2e, 0x64, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00,
	0x42, 0x18, 0x5a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_openapi_proto_rawDescOnce sync.Once
	file_openapi_proto_rawDescData = file_openapi_proto_rawDesc
)

func file_openapi_proto_rawDescGZIP() []byte {
	file_openapi_proto_rawDescOnce.Do(func() {
		file_openapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_openapi_proto_rawDescData)
	})
	return file_openapi_proto_rawDescData
}

var file_openapi_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_openapi_proto_goTypes = []interface{}{
	(*RenameCmd)(nil),              // 0: service.RenameCmd
	(*MoveCmd)(nil),                // 1: service.MoveCmd
	(*CopyCmd)(nil),                // 2: service.CopyCmd
	(*SubmitTokenCmd)(nil),         // 3: service.SubmitTokenCmd
	(*QryStreamURLCmd)(nil),        // 4: service.QryStreamURLCmd
	(*TNode)(nil),                  // 5: service.TNode
	(*StreamToken)(nil),            // 6: service.StreamToken
	(*SrcAndDstBo)(nil),            // 7: service.SrcAndDstBo
	(*CopyNodeBo)(nil),             // 8: service.CopyNodeBo
	(*MoveNodeBo)(nil),             // 9: service.MoveNodeBo
	(*WriteTokenBo)(nil),           // 10: service.WriteTokenBo
	(*LimitQueryBo)(nil),           // 11: service.LimitQueryBo
	(*CreateUserBo)(nil),           // 12: service.CreateUserBo
	(*PwdUpdateBo)(nil),            // 13: service.PwdUpdateBo
	(*UserListDto)(nil),            // 14: service.UserListDto
	(*UserInfo)(nil),               // 15: service.UserInfo
	(*DirNameListDto)(nil),         // 16: service.DirNameListDto
	(*DirNodeListDto)(nil),         // 17: service.DirNodeListDto
	(*dto.QryOfString)(nil),        // 18: dto.QryOfString
	(*dto.QryOfStrings)(nil),       // 19: dto.QryOfStrings
	(*dto.QueryLimitOfString)(nil), // 20: dto.QueryLimitOfString
	(*dto.ResultOfBool)(nil),       // 21: dto.ResultOfBool
	(*dto.ResultOfInt64)(nil),      // 22: dto.ResultOfInt64
	(*dto.ResultOfString)(nil),     // 23: dto.ResultOfString
}
var file_openapi_proto_depIdxs = []int32{
	15, // 0: service.UserListDto.datas:type_name -> service.UserInfo
	5,  // 1: service.DirNodeListDto.datas:type_name -> service.TNode
	18, // 2: service.OpenApi.IsDir:input_type -> dto.QryOfString
	18, // 3: service.OpenApi.IsFile:input_type -> dto.QryOfString
	18, // 4: service.OpenApi.IsExist:input_type -> dto.QryOfString
	18, // 5: service.OpenApi.GetFileSize:input_type -> dto.QryOfString
	18, // 6: service.OpenApi.GetNode:input_type -> dto.QryOfString
	19, // 7: service.OpenApi.GetNodes:input_type -> dto.QryOfStrings
	20, // 8: service.OpenApi.GetDirNameList:input_type -> dto.QueryLimitOfString
	20, // 9: service.OpenApi.GetDirNodeList:input_type -> dto.QueryLimitOfString
	18, // 10: service.OpenApi.DoMkDir:input_type -> dto.QryOfString
	18, // 11: service.OpenApi.DoDelete:input_type -> dto.QryOfString
	0,  // 12: service.OpenApi.DoRename:input_type -> service.RenameCmd
	1,  // 13: service.OpenApi.DoCopy:input_type -> service.MoveCmd
	2,  // 14: service.OpenApi.DoMove:input_type -> service.CopyCmd
	18, // 15: service.OpenApi.DoQueryToken:input_type -> dto.QryOfString
	18, // 16: service.OpenApi.DoAskReadToken:input_type -> dto.QryOfString
	18, // 17: service.OpenApi.DoAskWriteToken:input_type -> dto.QryOfString
	18, // 18: service.OpenApi.DoRefreshToken:input_type -> dto.QryOfString
	3,  // 19: service.OpenApi.DoSubmitWriteToken:input_type -> service.SubmitTokenCmd
	4,  // 20: service.OpenApi.GetReadStreamURL:input_type -> service.QryStreamURLCmd
	4,  // 21: service.OpenApi.GetWriteStreamURL:input_type -> service.QryStreamURLCmd
	21, // 22: service.OpenApi.IsDir:output_type -> dto.ResultOfBool
	21, // 23: service.OpenApi.IsFile:output_type -> dto.ResultOfBool
	21, // 24: service.OpenApi.IsExist:output_type -> dto.ResultOfBool
	22, // 25: service.OpenApi.GetFileSize:output_type -> dto.ResultOfInt64
	5,  // 26: service.OpenApi.GetNode:output_type -> service.TNode
	17, // 27: service.OpenApi.GetNodes:output_type -> service.DirNodeListDto
	16, // 28: service.OpenApi.GetDirNameList:output_type -> service.DirNameListDto
	17, // 29: service.OpenApi.GetDirNodeList:output_type -> service.DirNodeListDto
	23, // 30: service.OpenApi.DoMkDir:output_type -> dto.ResultOfString
	21, // 31: service.OpenApi.DoDelete:output_type -> dto.ResultOfBool
	21, // 32: service.OpenApi.DoRename:output_type -> dto.ResultOfBool
	23, // 33: service.OpenApi.DoCopy:output_type -> dto.ResultOfString
	21, // 34: service.OpenApi.DoMove:output_type -> dto.ResultOfBool
	6,  // 35: service.OpenApi.DoQueryToken:output_type -> service.StreamToken
	6,  // 36: service.OpenApi.DoAskReadToken:output_type -> service.StreamToken
	6,  // 37: service.OpenApi.DoAskWriteToken:output_type -> service.StreamToken
	6,  // 38: service.OpenApi.DoRefreshToken:output_type -> service.StreamToken
	5,  // 39: service.OpenApi.DoSubmitWriteToken:output_type -> service.TNode
	23, // 40: service.OpenApi.GetReadStreamURL:output_type -> dto.ResultOfString
	23, // 41: service.OpenApi.GetWriteStreamURL:output_type -> dto.ResultOfString
	22, // [22:42] is the sub-list for method output_type
	2,  // [2:22] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_openapi_proto_init() }
func file_openapi_proto_init() {
	if File_openapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTokenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryStreamURLCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcAndDstBo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyNodeBo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveNodeBo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTokenBo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitQueryBo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserBo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PwdUpdateBo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirNameListDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirNodeListDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openapi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openapi_proto_goTypes,
		DependencyIndexes: file_openapi_proto_depIdxs,
		MessageInfos:      file_openapi_proto_msgTypes,
	}.Build()
	File_openapi_proto = out.File
	file_openapi_proto_rawDesc = nil
	file_openapi_proto_goTypes = nil
	file_openapi_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OpenApiClient is the client API for OpenApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenApiClient interface {
	IsDir(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error)
	IsFile(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error)
	IsExist(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error)
	GetFileSize(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfInt64, error)
	GetNode(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*TNode, error)
	GetNodes(ctx context.Context, in *dto.QryOfStrings, opts ...grpc.CallOption) (*DirNodeListDto, error)
	GetDirNameList(ctx context.Context, in *dto.QueryLimitOfString, opts ...grpc.CallOption) (*DirNameListDto, error)
	GetDirNodeList(ctx context.Context, in *dto.QueryLimitOfString, opts ...grpc.CallOption) (*DirNodeListDto, error)
	DoMkDir(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfString, error)
	DoDelete(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error)
	DoRename(ctx context.Context, in *RenameCmd, opts ...grpc.CallOption) (*dto.ResultOfBool, error)
	DoCopy(ctx context.Context, in *MoveCmd, opts ...grpc.CallOption) (*dto.ResultOfString, error)
	DoMove(ctx context.Context, in *CopyCmd, opts ...grpc.CallOption) (*dto.ResultOfBool, error)
	DoQueryToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoAskReadToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoAskWriteToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoRefreshToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error)
	DoSubmitWriteToken(ctx context.Context, in *SubmitTokenCmd, opts ...grpc.CallOption) (*TNode, error)
	GetReadStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*dto.ResultOfString, error)
	GetWriteStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*dto.ResultOfString, error)
}

type openApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenApiClient(cc grpc.ClientConnInterface) OpenApiClient {
	return &openApiClient{cc}
}

func (c *openApiClient) IsDir(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error) {
	out := new(dto.ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/IsDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) IsFile(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error) {
	out := new(dto.ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/IsFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) IsExist(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error) {
	out := new(dto.ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/IsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetFileSize(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfInt64, error) {
	out := new(dto.ResultOfInt64)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetFileSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetNode(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*TNode, error) {
	out := new(TNode)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetNodes(ctx context.Context, in *dto.QryOfStrings, opts ...grpc.CallOption) (*DirNodeListDto, error) {
	out := new(DirNodeListDto)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetDirNameList(ctx context.Context, in *dto.QueryLimitOfString, opts ...grpc.CallOption) (*DirNameListDto, error) {
	out := new(DirNameListDto)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetDirNameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetDirNodeList(ctx context.Context, in *dto.QueryLimitOfString, opts ...grpc.CallOption) (*DirNodeListDto, error) {
	out := new(DirNodeListDto)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetDirNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoMkDir(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfString, error) {
	out := new(dto.ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoMkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoDelete(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*dto.ResultOfBool, error) {
	out := new(dto.ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoRename(ctx context.Context, in *RenameCmd, opts ...grpc.CallOption) (*dto.ResultOfBool, error) {
	out := new(dto.ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoCopy(ctx context.Context, in *MoveCmd, opts ...grpc.CallOption) (*dto.ResultOfString, error) {
	out := new(dto.ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoMove(ctx context.Context, in *CopyCmd, opts ...grpc.CallOption) (*dto.ResultOfBool, error) {
	out := new(dto.ResultOfBool)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoQueryToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoQueryToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoAskReadToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoAskReadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoAskWriteToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoAskWriteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoRefreshToken(ctx context.Context, in *dto.QryOfString, opts ...grpc.CallOption) (*StreamToken, error) {
	out := new(StreamToken)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) DoSubmitWriteToken(ctx context.Context, in *SubmitTokenCmd, opts ...grpc.CallOption) (*TNode, error) {
	out := new(TNode)
	err := c.cc.Invoke(ctx, "/service.OpenApi/DoSubmitWriteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetReadStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*dto.ResultOfString, error) {
	out := new(dto.ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetReadStreamURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openApiClient) GetWriteStreamURL(ctx context.Context, in *QryStreamURLCmd, opts ...grpc.CallOption) (*dto.ResultOfString, error) {
	out := new(dto.ResultOfString)
	err := c.cc.Invoke(ctx, "/service.OpenApi/GetWriteStreamURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenApiServer is the server API for OpenApi service.
type OpenApiServer interface {
	IsDir(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error)
	IsFile(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error)
	IsExist(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error)
	GetFileSize(context.Context, *dto.QryOfString) (*dto.ResultOfInt64, error)
	GetNode(context.Context, *dto.QryOfString) (*TNode, error)
	GetNodes(context.Context, *dto.QryOfStrings) (*DirNodeListDto, error)
	GetDirNameList(context.Context, *dto.QueryLimitOfString) (*DirNameListDto, error)
	GetDirNodeList(context.Context, *dto.QueryLimitOfString) (*DirNodeListDto, error)
	DoMkDir(context.Context, *dto.QryOfString) (*dto.ResultOfString, error)
	DoDelete(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error)
	DoRename(context.Context, *RenameCmd) (*dto.ResultOfBool, error)
	DoCopy(context.Context, *MoveCmd) (*dto.ResultOfString, error)
	DoMove(context.Context, *CopyCmd) (*dto.ResultOfBool, error)
	DoQueryToken(context.Context, *dto.QryOfString) (*StreamToken, error)
	DoAskReadToken(context.Context, *dto.QryOfString) (*StreamToken, error)
	DoAskWriteToken(context.Context, *dto.QryOfString) (*StreamToken, error)
	DoRefreshToken(context.Context, *dto.QryOfString) (*StreamToken, error)
	DoSubmitWriteToken(context.Context, *SubmitTokenCmd) (*TNode, error)
	GetReadStreamURL(context.Context, *QryStreamURLCmd) (*dto.ResultOfString, error)
	GetWriteStreamURL(context.Context, *QryStreamURLCmd) (*dto.ResultOfString, error)
}

// UnimplementedOpenApiServer can be embedded to have forward compatible implementations.
type UnimplementedOpenApiServer struct {
}

func (*UnimplementedOpenApiServer) IsDir(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDir not implemented")
}
func (*UnimplementedOpenApiServer) IsFile(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFile not implemented")
}
func (*UnimplementedOpenApiServer) IsExist(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExist not implemented")
}
func (*UnimplementedOpenApiServer) GetFileSize(context.Context, *dto.QryOfString) (*dto.ResultOfInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSize not implemented")
}
func (*UnimplementedOpenApiServer) GetNode(context.Context, *dto.QryOfString) (*TNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedOpenApiServer) GetNodes(context.Context, *dto.QryOfStrings) (*DirNodeListDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedOpenApiServer) GetDirNameList(context.Context, *dto.QueryLimitOfString) (*DirNameListDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirNameList not implemented")
}
func (*UnimplementedOpenApiServer) GetDirNodeList(context.Context, *dto.QueryLimitOfString) (*DirNodeListDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirNodeList not implemented")
}
func (*UnimplementedOpenApiServer) DoMkDir(context.Context, *dto.QryOfString) (*dto.ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMkDir not implemented")
}
func (*UnimplementedOpenApiServer) DoDelete(context.Context, *dto.QryOfString) (*dto.ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoDelete not implemented")
}
func (*UnimplementedOpenApiServer) DoRename(context.Context, *RenameCmd) (*dto.ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRename not implemented")
}
func (*UnimplementedOpenApiServer) DoCopy(context.Context, *MoveCmd) (*dto.ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCopy not implemented")
}
func (*UnimplementedOpenApiServer) DoMove(context.Context, *CopyCmd) (*dto.ResultOfBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMove not implemented")
}
func (*UnimplementedOpenApiServer) DoQueryToken(context.Context, *dto.QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoQueryToken not implemented")
}
func (*UnimplementedOpenApiServer) DoAskReadToken(context.Context, *dto.QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAskReadToken not implemented")
}
func (*UnimplementedOpenApiServer) DoAskWriteToken(context.Context, *dto.QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAskWriteToken not implemented")
}
func (*UnimplementedOpenApiServer) DoRefreshToken(context.Context, *dto.QryOfString) (*StreamToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRefreshToken not implemented")
}
func (*UnimplementedOpenApiServer) DoSubmitWriteToken(context.Context, *SubmitTokenCmd) (*TNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSubmitWriteToken not implemented")
}
func (*UnimplementedOpenApiServer) GetReadStreamURL(context.Context, *QryStreamURLCmd) (*dto.ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadStreamURL not implemented")
}
func (*UnimplementedOpenApiServer) GetWriteStreamURL(context.Context, *QryStreamURLCmd) (*dto.ResultOfString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteStreamURL not implemented")
}

func RegisterOpenApiServer(s *grpc.Server, srv OpenApiServer) {
	s.RegisterService(&_OpenApi_serviceDesc, srv)
}

func _OpenApi_IsDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).IsDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/IsDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).IsDir(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_IsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).IsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/IsFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).IsFile(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_IsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).IsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/IsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).IsExist(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetFileSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetFileSize(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetNode(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetNodes(ctx, req.(*dto.QryOfStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetDirNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QueryLimitOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetDirNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetDirNameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetDirNameList(ctx, req.(*dto.QueryLimitOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetDirNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QueryLimitOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetDirNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetDirNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetDirNodeList(ctx, req.(*dto.QueryLimitOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoMkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoMkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoMkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoMkDir(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoDelete(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoRename(ctx, req.(*RenameCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoCopy(ctx, req.(*MoveCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoMove(ctx, req.(*CopyCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoQueryToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoQueryToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoQueryToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoQueryToken(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoAskReadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoAskReadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoAskReadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoAskReadToken(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoAskWriteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoAskWriteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoAskWriteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoAskWriteToken(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.QryOfString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoRefreshToken(ctx, req.(*dto.QryOfString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_DoSubmitWriteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTokenCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).DoSubmitWriteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/DoSubmitWriteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).DoSubmitWriteToken(ctx, req.(*SubmitTokenCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetReadStreamURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryStreamURLCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetReadStreamURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetReadStreamURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetReadStreamURL(ctx, req.(*QryStreamURLCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenApi_GetWriteStreamURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryStreamURLCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenApiServer).GetWriteStreamURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OpenApi/GetWriteStreamURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenApiServer).GetWriteStreamURL(ctx, req.(*QryStreamURLCmd))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.OpenApi",
	HandlerType: (*OpenApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsDir",
			Handler:    _OpenApi_IsDir_Handler,
		},
		{
			MethodName: "IsFile",
			Handler:    _OpenApi_IsFile_Handler,
		},
		{
			MethodName: "IsExist",
			Handler:    _OpenApi_IsExist_Handler,
		},
		{
			MethodName: "GetFileSize",
			Handler:    _OpenApi_GetFileSize_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _OpenApi_GetNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _OpenApi_GetNodes_Handler,
		},
		{
			MethodName: "GetDirNameList",
			Handler:    _OpenApi_GetDirNameList_Handler,
		},
		{
			MethodName: "GetDirNodeList",
			Handler:    _OpenApi_GetDirNodeList_Handler,
		},
		{
			MethodName: "DoMkDir",
			Handler:    _OpenApi_DoMkDir_Handler,
		},
		{
			MethodName: "DoDelete",
			Handler:    _OpenApi_DoDelete_Handler,
		},
		{
			MethodName: "DoRename",
			Handler:    _OpenApi_DoRename_Handler,
		},
		{
			MethodName: "DoCopy",
			Handler:    _OpenApi_DoCopy_Handler,
		},
		{
			MethodName: "DoMove",
			Handler:    _OpenApi_DoMove_Handler,
		},
		{
			MethodName: "DoQueryToken",
			Handler:    _OpenApi_DoQueryToken_Handler,
		},
		{
			MethodName: "DoAskReadToken",
			Handler:    _OpenApi_DoAskReadToken_Handler,
		},
		{
			MethodName: "DoAskWriteToken",
			Handler:    _OpenApi_DoAskWriteToken_Handler,
		},
		{
			MethodName: "DoRefreshToken",
			Handler:    _OpenApi_DoRefreshToken_Handler,
		},
		{
			MethodName: "DoSubmitWriteToken",
			Handler:    _OpenApi_DoSubmitWriteToken_Handler,
		},
		{
			MethodName: "GetReadStreamURL",
			Handler:    _OpenApi_GetReadStreamURL_Handler,
		},
		{
			MethodName: "GetWriteStreamURL",
			Handler:    _OpenApi_GetWriteStreamURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}
